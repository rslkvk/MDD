/*
 * generated by Xtext
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package htmlgenerator.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package htmlgenerator.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import htmlgenerator.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;
 	
    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Model' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getModelAccess().getModelKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getModelAccess().getLeftCurlyBracketKeyword_1());
    }
	otherlv_2='Form' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getModelAccess().getFormKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getModelFormParserRuleCall_3_0()); 
	    }
		lv_model_3_0=ruleForm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"model",
        		lv_model_3_0, 
        		"Form");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getModelAccess().getCommaKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getFormFormParserRuleCall_4_1_0()); 
	    }
		lv_form_5_0=ruleForm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"form",
        		lv_form_5_0, 
        		"Form");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getModelAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleForm
entryRuleForm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFormRule()); }
	 iv_ruleForm=ruleForm 
	 { $current=$iv_ruleForm.current; } 
	 EOF 
;

// Rule Form
ruleForm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFormAccess().getLeftCurlyBracketKeyword_0());
    }
	otherlv_1='Name' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFormAccess().getNameKeyword_1());
    }
(
(
		lv_name_2_0=RULE_STRING
		{
			newLeafNode(lv_name_2_0, grammarAccess.getFormAccess().getNameSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFormRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"STRING");
	    }

)
)	otherlv_3='Description' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFormAccess().getDescriptionKeyword_3());
    }
(
(
		lv_description_4_0=RULE_STRING
		{
			newLeafNode(lv_description_4_0, grammarAccess.getFormAccess().getDescriptionSTRINGTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFormRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"description",
        		lv_description_4_0, 
        		"STRING");
	    }

)
)	otherlv_5='Title' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFormAccess().getTitleKeyword_5());
    }
(
(
		lv_title_6_0=RULE_STRING
		{
			newLeafNode(lv_title_6_0, grammarAccess.getFormAccess().getTitleSTRINGTerminalRuleCall_6_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFormRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"title",
        		lv_title_6_0, 
        		"STRING");
	    }

)
)	otherlv_7='Field' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getFormAccess().getFieldKeyword_7());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFormAccess().getFormFieldParserRuleCall_8_0()); 
	    }
		lv_form_8_0=ruleField		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFormRule());
	        }
       		add(
       			$current, 
       			"form",
        		lv_form_8_0, 
        		"Field");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_9=',' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getFormAccess().getCommaKeyword_9_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFormAccess().getFormFieldParserRuleCall_9_1_0()); 
	    }
		lv_form_10_0=ruleField		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFormRule());
	        }
       		add(
       			$current, 
       			"form",
        		lv_form_10_0, 
        		"Field");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_11='}' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getFormAccess().getRightCurlyBracketKeyword_10());
    }
)
;





// Entry rule entryRuleField
entryRuleField returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFieldRule()); }
	 iv_ruleField=ruleField 
	 { $current=$iv_ruleField.current; } 
	 EOF 
;

// Rule Field
ruleField returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFieldAccess().getLeftCurlyBracketKeyword_0_0());
    }
	otherlv_1='Name' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFieldAccess().getNameKeyword_0_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getFieldAccess().getNameIDTerminalRuleCall_0_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFieldRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3='Label' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFieldAccess().getLabelKeyword_0_3());
    }
(
(
		lv_label_4_0=RULE_STRING
		{
			newLeafNode(lv_label_4_0, grammarAccess.getFieldAccess().getLabelSTRINGTerminalRuleCall_0_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFieldRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"label",
        		lv_label_4_0, 
        		"STRING");
	    }

)
)	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFieldAccess().getRightCurlyBracketKeyword_0_5());
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getFieldAccess().getTextFieldParserRuleCall_1()); 
    }
    this_TextField_6=ruleTextField
    { 
        $current = $this_TextField_6.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleTextField
entryRuleTextField returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTextFieldRule()); }
	 iv_ruleTextField=ruleTextField 
	 { $current=$iv_ruleTextField.current; } 
	 EOF 
;

// Rule TextField
ruleTextField returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='TextField' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTextFieldAccess().getTextFieldKeyword_0_0());
    }
(	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTextFieldAccess().getLeftCurlyBracketKeyword_0_1_0());
    }
	otherlv_2='Name' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTextFieldAccess().getNameKeyword_0_1_1());
    }
(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getTextFieldAccess().getNameIDTerminalRuleCall_0_1_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTextFieldRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
)	otherlv_4='Label' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTextFieldAccess().getLabelKeyword_0_1_3());
    }
(
(
		lv_label_5_0=RULE_STRING
		{
			newLeafNode(lv_label_5_0, grammarAccess.getTextFieldAccess().getLabelSTRINGTerminalRuleCall_0_1_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTextFieldRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"label",
        		lv_label_5_0, 
        		"STRING");
	    }

)
)	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getTextFieldAccess().getRightCurlyBracketKeyword_0_1_5());
    }
))
    |
    { 
        newCompositeNode(grammarAccess.getTextFieldAccess().getMultilineFieldParserRuleCall_1()); 
    }
    this_MultilineField_7=ruleMultilineField
    { 
        $current = $this_MultilineField_7.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleMultilineField
entryRuleMultilineField returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultilineFieldRule()); }
	 iv_ruleMultilineField=ruleMultilineField 
	 { $current=$iv_ruleMultilineField.current; } 
	 EOF 
;

// Rule MultilineField
ruleMultilineField returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='MultilineField' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMultilineFieldAccess().getMultilineFieldKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMultilineFieldAccess().getLeftCurlyBracketKeyword_1());
    }
	otherlv_2='Name' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMultilineFieldAccess().getNameKeyword_2());
    }
(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getMultilineFieldAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultilineFieldRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
)	otherlv_4='Label' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMultilineFieldAccess().getLabelKeyword_4());
    }
(
(
		lv_label_5_0=RULE_STRING
		{
			newLeafNode(lv_label_5_0, grammarAccess.getMultilineFieldAccess().getLabelSTRINGTerminalRuleCall_5_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultilineFieldRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"label",
        		lv_label_5_0, 
        		"STRING");
	    }

)
)	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getMultilineFieldAccess().getRightCurlyBracketKeyword_6());
    }
)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


