/*
* 
*/
package hochschuleemf.diagram.part;

import java.util.Collection;
import java.util.Collections;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.gmf.tooling.runtime.update.DiagramUpdater;

import hochschuleemf.Fachbereich;
import hochschuleemf.Hochschule;
import hochschuleemf.HochschuleemfPackage;
import hochschuleemf.Studiengang;
import hochschuleemf.diagram.edit.parts.FachbereichEditPart;
import hochschuleemf.diagram.edit.parts.FachbereichFachbereichStudiengangCompartmentEditPart;
import hochschuleemf.diagram.edit.parts.FachbereichStudiengangEditPart;
import hochschuleemf.diagram.edit.parts.HochschuleEditPart;
import hochschuleemf.diagram.edit.parts.HochschuleFachbereichEditPart;
import hochschuleemf.diagram.edit.parts.StudiengangEditPart;
import hochschuleemf.diagram.providers.HochschuleemfElementTypes;

/**
 * @generated
 */
public class HochschuleemfDiagramUpdater {

	/**
	* @generated
	*/
	public static boolean isShortcutOrphaned(View view) {
		return !view.isSetElement() || view.getElement() == null || view.getElement().eIsProxy();
	}

	/**
	* @generated
	*/
	public static List<HochschuleemfNodeDescriptor> getSemanticChildren(View view) {
		switch (HochschuleemfVisualIDRegistry.getVisualID(view)) {
		case HochschuleEditPart.VISUAL_ID:
			return getHochschule_1000SemanticChildren(view);
		}
		return Collections.emptyList();
	}

	/**
	* @generated
	*/
	public static List<HochschuleemfNodeDescriptor> getHochschule_1000SemanticChildren(View view) {
		if (!view.isSetElement()) {
			return Collections.emptyList();
		}
		Hochschule modelElement = (Hochschule) view.getElement();
		LinkedList<HochschuleemfNodeDescriptor> result = new LinkedList<HochschuleemfNodeDescriptor>();
		for (Iterator<?> it = modelElement.getFachbereich().iterator(); it.hasNext();) {
			Fachbereich childElement = (Fachbereich) it.next();
			int visualID = HochschuleemfVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == FachbereichEditPart.VISUAL_ID) {
				result.add(new HochschuleemfNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	* @generated
	*/
	public static List<HochschuleemfLinkDescriptor> getContainedLinks(View view) {
		switch (HochschuleemfVisualIDRegistry.getVisualID(view)) {
		case HochschuleEditPart.VISUAL_ID:
			return getHochschule_1000ContainedLinks(view);
		case FachbereichEditPart.VISUAL_ID:
			return getFachbereich_2001ContainedLinks(view);
		}
		return Collections.emptyList();
	}

	/**
	* @generated
	*/
	public static List<HochschuleemfLinkDescriptor> getIncomingLinks(View view) {
		switch (HochschuleemfVisualIDRegistry.getVisualID(view)) {
		case FachbereichEditPart.VISUAL_ID:
			return getFachbereich_2001IncomingLinks(view);
		}
		return Collections.emptyList();
	}

	/**
	* @generated
	*/
	public static List<HochschuleemfLinkDescriptor> getOutgoingLinks(View view) {
		switch (HochschuleemfVisualIDRegistry.getVisualID(view)) {
		case FachbereichEditPart.VISUAL_ID:
			return getFachbereich_2001OutgoingLinks(view);
		}
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<HochschuleemfLinkDescriptor> getHochschule_1000ContainedLinks(View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<HochschuleemfLinkDescriptor> getFachbereich_2001ContainedLinks(View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<HochschuleemfLinkDescriptor> getFachbereich_2001IncomingLinks(View view) {
		return Collections.emptyList();
	}

	/**
	 * @generated
	 */
	public static List<HochschuleemfLinkDescriptor> getFachbereich_2001OutgoingLinks(View view) {
		return Collections.emptyList();
	}

	/**
	* @generated
	*/
	public static final DiagramUpdater TYPED_INSTANCE = new DiagramUpdater() {
		/**
		* @generated
		*/
		@Override

		public List<HochschuleemfNodeDescriptor> getSemanticChildren(View view) {
			return HochschuleemfDiagramUpdater.getSemanticChildren(view);
		}

		/**
		* @generated
		*/
		@Override

		public List<HochschuleemfLinkDescriptor> getContainedLinks(View view) {
			return HochschuleemfDiagramUpdater.getContainedLinks(view);
		}

		/**
		* @generated
		*/
		@Override

		public List<HochschuleemfLinkDescriptor> getIncomingLinks(View view) {
			return HochschuleemfDiagramUpdater.getIncomingLinks(view);
		}

		/**
		* @generated
		*/
		@Override

		public List<HochschuleemfLinkDescriptor> getOutgoingLinks(View view) {
			return HochschuleemfDiagramUpdater.getOutgoingLinks(view);
		}
	};

}
