/*
 * generated by Xtext
 */
package de.thm.mni.hochschule.mydsl.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import de.thm.mni.hochschule.mydsl.myDsl.Evaluation;
import de.thm.mni.hochschule.mydsl.myDsl.Fachbereich;
import de.thm.mni.hochschule.mydsl.myDsl.Hochschule;
import de.thm.mni.hochschule.mydsl.myDsl.Lehrbeauftrager;
import de.thm.mni.hochschule.mydsl.myDsl.MyDslPackage;
import de.thm.mni.hochschule.mydsl.myDsl.Professor;
import de.thm.mni.hochschule.mydsl.myDsl.Student;
import de.thm.mni.hochschule.mydsl.myDsl.Studiengang;
import de.thm.mni.hochschule.mydsl.myDsl.Vorlesung;
import de.thm.mni.hochschule.mydsl.services.MyDslGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == MyDslPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case MyDslPackage.EVALUATION:
				sequence_Evaluation(context, (Evaluation) semanticObject); 
				return; 
			case MyDslPackage.FACHBEREICH:
				sequence_Fachbereich(context, (Fachbereich) semanticObject); 
				return; 
			case MyDslPackage.HOCHSCHULE:
				sequence_Hochschule(context, (Hochschule) semanticObject); 
				return; 
			case MyDslPackage.LEHRBEAUFTRAGER:
				sequence_Lehrbeauftrager(context, (Lehrbeauftrager) semanticObject); 
				return; 
			case MyDslPackage.PROFESSOR:
				sequence_Professor(context, (Professor) semanticObject); 
				return; 
			case MyDslPackage.STUDENT:
				sequence_Student(context, (Student) semanticObject); 
				return; 
			case MyDslPackage.STUDIENGANG:
				sequence_Studiengang(context, (Studiengang) semanticObject); 
				return; 
			case MyDslPackage.VORLESUNG:
				sequence_Vorlesung(context, (Vorlesung) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     gesamtnote=INT
	 */
	protected void sequence_Evaluation(EObject context, Evaluation semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.EVALUATION__GESAMTNOTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.EVALUATION__GESAMTNOTE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getEvaluationAccess().getGesamtnoteINTTerminalRuleCall_2_0(), semanticObject.getGesamtnote());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         alias=STRING 
	 *         studiengang+=Studiengang 
	 *         studiengang+=Studiengang* 
	 *         dozent+=Dozent 
	 *         dozent+=Dozent* 
	 *         (vorlesung+=[Vorlesung|ID] vorlesung+=[Vorlesung|ID]*)?
	 *     )
	 */
	protected void sequence_Fachbereich(EObject context, Fachbereich semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=STRING student+=Student student+=Student* fachbereich+=Fachbereich fachbereich+=Fachbereich*)
	 */
	protected void sequence_Hochschule(EObject context, Hochschule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (personalnr=STRING vorname=STRING nachname=STRING vorlesung+=[Vorlesung|ID] vorlesung+=[Vorlesung|ID]*)
	 */
	protected void sequence_Lehrbeauftrager(EObject context, Lehrbeauftrager semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (personalnr=STRING vorname=STRING nachname=STRING vorlesung+=[Vorlesung|ID] vorlesung+=[Vorlesung|ID]*)
	 */
	protected void sequence_Professor(EObject context, Professor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (matrikelnr=STRING vorname=STRING nachname=STRING (vorlesung+=[Vorlesung|ID] vorlesung+=[Vorlesung|ID]*)?)
	 */
	protected void sequence_Student(EObject context, Student semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         nc=STRING 
	 *         student+=[Student|ID] 
	 *         student+=[Student|ID]* 
	 *         vorlesung+=Vorlesung 
	 *         vorlesung+=Vorlesung*
	 *     )
	 */
	protected void sequence_Studiengang(EObject context, Studiengang semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         modulnr=STRING 
	 *         beschreibung=STRING 
	 *         crp=STRING 
	 *         dozent=[Dozent|ID] 
	 *         student+=[Student|ID] 
	 *         student+=[Student|ID]* 
	 *         tutor+=[Student|ID] 
	 *         tutor+=[Student|ID]* 
	 *         evaluation+=Evaluation 
	 *         evaluation+=Evaluation*
	 *     )
	 */
	protected void sequence_Vorlesung(EObject context, Vorlesung semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
